{"ast":null,"code":"import axios from \"axios\";\nimport { ORDER_SET_TYPE, CATEGORY_LIST_REQUEST, CATEGORY_LIST_FAIL, CATEGORY_LIST_SUCCESS, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, ORDER_ADD_ITEM, ORDER_REMOVE_ITEM, ORDER_CLEAR } from \"./constants\";\n\n// ✅ Backend base URL\nconst axiosInstance = axios.create({\n  baseURL: \"http://localhost:7000/order\"\n});\n\n// ✅ Start order\nexport const startOrder = async () => {\n  try {\n    const response = await axiosInstance.post(\"/start\");\n    console.log(\"Order started:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to start order:\", error.message);\n    throw error;\n  }\n};\n\n// ✅ Set order type\nexport const setOrderType = (dispatch, orderType) => {\n  dispatch({\n    type: ORDER_SET_TYPE,\n    payload: orderType\n  });\n};\n\n// ✅ Category representative images\nconst categoryImageMap = {\n  ALMUSAL: \"/images/ALMUSAL/Tapsilog.PNG\",\n  FAMILY_MEAL: \"images/FAMILYMEAL/FiestaMeal.PNG\",\n  MERYENDA: \"/images/MERYENDA/Pancitpalabok.png\",\n  PANGHIMAGAS: \"/images/PANGHIMAGAS/Lecheflan.png\",\n  RICE_MEAL: \"images/RICEMEAL/Porkbbq.png\",\n  WHATs_NEW: \"images/WHATSNEW/Champorado_puto.PNG\"\n};\n\n// ✅ Get categories\nexport const listCategories = async dispatch => {\n  dispatch({\n    type: CATEGORY_LIST_REQUEST\n  });\n  try {\n    const {\n      data\n    } = await axiosInstance.get(\"/categories\");\n    const mapped = data.map(category => ({\n      name: category,\n      image: categoryImageMap[category.toUpperCase()] || \"/images/default.png\"\n    }));\n    dispatch({\n      type: CATEGORY_LIST_SUCCESS,\n      payload: mapped\n    });\n  } catch (error) {\n    dispatch({\n      type: CATEGORY_LIST_FAIL,\n      payload: error.message || \"Failed to fetch categories\"\n    });\n  }\n};\n\n// ✅ Normalize filename for better matching\nconst normalizeImagePath = (category, itemName) => {\n  const baseName = itemName.replaceAll(\"&\", \"and\").replaceAll(\" \", \"\").replaceAll(\"-\", \"\").replaceAll(\"(\", \"\").replaceAll(\")\", \"\").replaceAll(\".\", \"\").replaceAll(\"/\", \"\").trim();\n  const variations = [baseName, baseName.toLowerCase(), baseName.toUpperCase(), baseName.charAt(0).toUpperCase() + baseName.slice(1).toLowerCase()];\n  const extensions = [\".png\", \".PNG\", \".jpg\", \".JPG\", \".jpeg\", \".JPEG\"];\n  const candidates = [];\n  variations.forEach(name => {\n    extensions.forEach(ext => {\n      candidates.push(`/images/${category.toUpperCase()}/${name}${ext}`);\n    });\n  });\n  console.log(`Looking for ${itemName} in:`, candidates);\n  return candidates;\n};\n\n// ✅ Get menu products per category\nexport const listProducts = async (dispatch, categoryName = \"WHATSNEW\") => {\n  dispatch({\n    type: PRODUCT_LIST_REQUEST\n  });\n  try {\n    const {\n      data\n    } = await axiosInstance.get(`/${categoryName}/menu`, {\n      params: {\n        sortOrder: \"default\"\n      }\n    });\n    const withImages = data.map(product => {\n      const possibleImages = normalizeImagePath(categoryName.toUpperCase(), product.itemName);\n      console.log(`Product: ${product.itemName}`, {\n        possibleImages,\n        selected: possibleImages[0]\n      });\n\n      // First valid possible path or fallback\n      return {\n        ...product,\n        image: possibleImages[0] || \"/images/default.png\"\n      };\n    });\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: withImages\n    });\n  } catch (error) {\n    console.error(\"Error fetching products:\", error);\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message || \"Failed to fetch menu\"\n    });\n  }\n};\n\n// ✅ Order actions\nexport const addToOrder = (dispatch, item) => {\n  dispatch({\n    type: ORDER_ADD_ITEM,\n    payload: item\n  });\n};\nexport const removeFromOrder = (dispatch, item) => {\n  dispatch({\n    type: ORDER_REMOVE_ITEM,\n    payload: item\n  });\n};\nexport const clearOrder = dispatch => {\n  dispatch({\n    type: ORDER_CLEAR\n  });\n};","map":{"version":3,"names":["axios","ORDER_SET_TYPE","CATEGORY_LIST_REQUEST","CATEGORY_LIST_FAIL","CATEGORY_LIST_SUCCESS","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","ORDER_ADD_ITEM","ORDER_REMOVE_ITEM","ORDER_CLEAR","axiosInstance","create","baseURL","startOrder","response","post","console","log","data","error","message","setOrderType","dispatch","orderType","type","payload","categoryImageMap","ALMUSAL","FAMILY_MEAL","MERYENDA","PANGHIMAGAS","RICE_MEAL","WHATs_NEW","listCategories","get","mapped","map","category","name","image","toUpperCase","normalizeImagePath","itemName","baseName","replaceAll","trim","variations","toLowerCase","charAt","slice","extensions","candidates","forEach","ext","push","listProducts","categoryName","params","sortOrder","withImages","product","possibleImages","selected","addToOrder","item","removeFromOrder","clearOrder"],"sources":["C:/Users/CLARENCE/SAMPLE CODES/.vscode/KioskApp/frontend/src/actions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  ORDER_SET_TYPE,\r\n  CATEGORY_LIST_REQUEST,\r\n  CATEGORY_LIST_FAIL,\r\n  CATEGORY_LIST_SUCCESS,\r\n  PRODUCT_LIST_REQUEST,\r\n  PRODUCT_LIST_SUCCESS,\r\n  PRODUCT_LIST_FAIL,\r\n  ORDER_ADD_ITEM,\r\n  ORDER_REMOVE_ITEM,\r\n  ORDER_CLEAR,\r\n} from \"./constants\";\r\n\r\n// ✅ Backend base URL\r\nconst axiosInstance = axios.create({\r\n  baseURL: \"http://localhost:7000/order\",\r\n});\r\n\r\n// ✅ Start order\r\nexport const startOrder = async () => {\r\n  try {\r\n    const response = await axiosInstance.post(\"/start\");\r\n    console.log(\"Order started:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Failed to start order:\", error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Set order type\r\nexport const setOrderType = (dispatch, orderType) => {\r\n  dispatch({\r\n    type: ORDER_SET_TYPE,\r\n    payload: orderType,\r\n  });\r\n};\r\n\r\n// ✅ Category representative images\r\nconst categoryImageMap = {\r\n  ALMUSAL:    \"/images/ALMUSAL/Tapsilog.PNG\",\r\n  FAMILY_MEAL: \"images/FAMILYMEAL/FiestaMeal.PNG\",\r\n  MERYENDA:   \"/images/MERYENDA/Pancitpalabok.png\",\r\n  PANGHIMAGAS:\"/images/PANGHIMAGAS/Lecheflan.png\",\r\n  RICE_MEAL:   \"images/RICEMEAL/Porkbbq.png\",\r\n  WHATs_NEW:   \"images/WHATSNEW/Champorado_puto.PNG\",\r\n};\r\n\r\n// ✅ Get categories\r\nexport const listCategories = async (dispatch) => {\r\n  dispatch({ type: CATEGORY_LIST_REQUEST });\r\n  try {\r\n    const { data } = await axiosInstance.get(\"/categories\");\r\n    const mapped = data.map((category) => ({\r\n      name: category,\r\n      image: categoryImageMap[category.toUpperCase()] || \"/images/default.png\",\r\n    }));\r\n    dispatch({ type: CATEGORY_LIST_SUCCESS, payload: mapped });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CATEGORY_LIST_FAIL,\r\n      payload: error.message || \"Failed to fetch categories\",\r\n    });\r\n  }\r\n};\r\n\r\n// ✅ Normalize filename for better matching\r\nconst normalizeImagePath = (category, itemName) => {\r\n  const baseName = itemName\r\n    .replaceAll(\"&\", \"and\")\r\n    .replaceAll(\" \", \"\")\r\n    .replaceAll(\"-\", \"\")\r\n    .replaceAll(\"(\", \"\")\r\n    .replaceAll(\")\", \"\")\r\n    .replaceAll(\".\", \"\")\r\n    .replaceAll(\"/\", \"\")\r\n    .trim();\r\n\r\n  const variations = [\r\n    baseName,\r\n    baseName.toLowerCase(),\r\n    baseName.toUpperCase(),\r\n    baseName.charAt(0).toUpperCase() + baseName.slice(1).toLowerCase(),\r\n  ];\r\n\r\n  const extensions = [\".png\", \".PNG\", \".jpg\", \".JPG\", \".jpeg\", \".JPEG\"];\r\n\r\n  const candidates = [];\r\n  variations.forEach((name) => {\r\n    extensions.forEach((ext) => {\r\n      candidates.push(`/images/${category.toUpperCase()}/${name}${ext}`);\r\n    });\r\n  });\r\n\r\n  console.log(`Looking for ${itemName} in:`, candidates);\r\n  return candidates;\r\n};\r\n\r\n// ✅ Get menu products per category\r\nexport const listProducts = async (dispatch, categoryName = \"WHATSNEW\") => {\r\n  dispatch({ type: PRODUCT_LIST_REQUEST });\r\n\r\n  try {\r\n    const { data } = await axiosInstance.get(`/${categoryName}/menu`, {\r\n      params: { sortOrder: \"default\" },\r\n    });\r\n\r\n    const withImages = data.map((product) => {\r\n      const possibleImages = normalizeImagePath(\r\n        categoryName.toUpperCase(),\r\n        product.itemName\r\n      );\r\n\r\n      console.log(`Product: ${product.itemName}`, {\r\n        possibleImages,\r\n        selected: possibleImages[0]\r\n      });\r\n\r\n      // First valid possible path or fallback\r\n      return {\r\n        ...product,\r\n        image: possibleImages[0] || \"/images/default.png\",\r\n      };\r\n    });\r\n\r\n    dispatch({ type: PRODUCT_LIST_SUCCESS, payload: withImages });\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error);\r\n    dispatch({\r\n      type: PRODUCT_LIST_FAIL,\r\n      payload: error.message || \"Failed to fetch menu\",\r\n    });\r\n  }\r\n};\r\n\r\n// ✅ Order actions\r\nexport const addToOrder = (dispatch, item) => {\r\n  dispatch({ type: ORDER_ADD_ITEM, payload: item });\r\n};\r\n\r\nexport const removeFromOrder = (dispatch, item) => {\r\n  dispatch({ type: ORDER_REMOVE_ITEM, payload: item });\r\n};\r\n\r\nexport const clearOrder = (dispatch) => {\r\n  dispatch({ type: ORDER_CLEAR });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}