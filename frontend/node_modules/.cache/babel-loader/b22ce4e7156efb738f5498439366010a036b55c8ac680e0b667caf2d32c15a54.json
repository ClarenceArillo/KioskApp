{"ast":null,"code":"import axios from \"axios\";\nimport { ORDER_SET_TYPE, CATEGORY_LIST_REQUEST, CATEGORY_LIST_FAIL, CATEGORY_LIST_SUCCESS, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, ORDER_ADD_ITEM, ORDER_REMOVE_ITEM, ORDER_CLEAR } from \"./constants\";\n\n// ✅ Backend base URL\nconst axiosInstance = axios.create({\n  baseURL: \"http://localhost:7000/order\"\n});\n\n// ✅ Start Order (works already)\nexport const startOrder = async () => {\n  try {\n    const response = await axiosInstance.post(\"/start\");\n    console.log(\"Order started:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to start order:\", error.message);\n    throw error;\n  }\n};\n\n// ✅ Set order type (works already)\nexport const setOrderType = (dispatch, orderType) => {\n  dispatch({\n    type: ORDER_SET_TYPE,\n    payload: orderType\n  });\n};\n\n// ✅ Category images (based on your real folder names)\nconst categoryImageMap = {\n  ALMUSAL: \"/images/ALMUSAL/Tapsilog.PNG\",\n  FAMILYMEAL: \"/images/FAMILYMEAL/Fiesta meal.PNG\",\n  MERYENDA: \"/images/MERYENDA/Pancit palabok.png\",\n  PANGHIMAGAS: \"/images/PANGHIMAGAS/Leche flan.png\",\n  RICEMEAL: \"/images/RICEMEAL/Bistek.png\",\n  WHATSNEW: \"/images/WHATSNEW/Sisig.png\"\n};\n\n// ✅ Get categories\nexport const listCategories = async dispatch => {\n  dispatch({\n    type: CATEGORY_LIST_REQUEST\n  });\n  try {\n    const {\n      data\n    } = await axiosInstance.get(\"/categories\");\n    const mapped = data.map(category => ({\n      name: category,\n      image: categoryImageMap[category.toUpperCase()] || \"/images/default.png\"\n    }));\n    dispatch({\n      type: CATEGORY_LIST_SUCCESS,\n      payload: mapped\n    });\n  } catch (error) {\n    dispatch({\n      type: CATEGORY_LIST_FAIL,\n      payload: error.message || \"Failed to fetch categories\"\n    });\n  }\n};\n\n// ✅ Normalize filename (handles spaces, capitalization, encoding)\nconst normalizeImagePath = (category, itemName) => {\n  // Clean up name, trim and encode spaces and symbols\n  const cleanedName = itemName.replaceAll(\"&\", \"and\").replaceAll(\"  \", \" \").trim();\n\n  // Try multiple possible image extensions (case-insensitive)\n  const imageCandidates = [`/images/${category}/${cleanedName}.png`, `/images/${category}/${cleanedName}.PNG`, `/images/${category}/${cleanedName}.jpg`, `/images/${category}/${cleanedName}.JPG`];\n  return imageCandidates;\n};\n\n// ✅ Get menu products per category\nexport const listProducts = async (dispatch, categoryName = \"WHATSNEW\") => {\n  dispatch({\n    type: PRODUCT_LIST_REQUEST\n  });\n  try {\n    const {\n      data\n    } = await axiosInstance.get(`/${categoryName}/menu`, {\n      params: {\n        sortOrder: \"default\"\n      }\n    });\n    const withImages = data.map(product => {\n      const possibleImages = normalizeImagePath(categoryName.toUpperCase(), product.itemName);\n      return {\n        ...product,\n        image: possibleImages[0] // pick first valid format\n      };\n    });\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: withImages\n    });\n  } catch (error) {\n    console.error(\"Error fetching products:\", error);\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message || \"Failed to fetch menu\"\n    });\n  }\n};\n\n// ✅ Order actions\nexport const addToOrder = (dispatch, item) => {\n  dispatch({\n    type: ORDER_ADD_ITEM,\n    payload: item\n  });\n};\nexport const removeFromOrder = (dispatch, item) => {\n  dispatch({\n    type: ORDER_REMOVE_ITEM,\n    payload: item\n  });\n};\nexport const clearOrder = dispatch => {\n  dispatch({\n    type: ORDER_CLEAR\n  });\n};","map":{"version":3,"names":["axios","ORDER_SET_TYPE","CATEGORY_LIST_REQUEST","CATEGORY_LIST_FAIL","CATEGORY_LIST_SUCCESS","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","ORDER_ADD_ITEM","ORDER_REMOVE_ITEM","ORDER_CLEAR","axiosInstance","create","baseURL","startOrder","response","post","console","log","data","error","message","setOrderType","dispatch","orderType","type","payload","categoryImageMap","ALMUSAL","FAMILYMEAL","MERYENDA","PANGHIMAGAS","RICEMEAL","WHATSNEW","listCategories","get","mapped","map","category","name","image","toUpperCase","normalizeImagePath","itemName","cleanedName","replaceAll","trim","imageCandidates","listProducts","categoryName","params","sortOrder","withImages","product","possibleImages","addToOrder","item","removeFromOrder","clearOrder"],"sources":["C:/Users/CLARENCE/SAMPLE CODES/.vscode/KioskApp/frontend/src/actions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  ORDER_SET_TYPE,\r\n  CATEGORY_LIST_REQUEST,\r\n  CATEGORY_LIST_FAIL,\r\n  CATEGORY_LIST_SUCCESS,\r\n  PRODUCT_LIST_REQUEST,\r\n  PRODUCT_LIST_SUCCESS,\r\n  PRODUCT_LIST_FAIL,\r\n  ORDER_ADD_ITEM,\r\n  ORDER_REMOVE_ITEM,\r\n  ORDER_CLEAR,\r\n} from \"./constants\";\r\n\r\n// ✅ Backend base URL\r\nconst axiosInstance = axios.create({\r\n  baseURL: \"http://localhost:7000/order\",\r\n});\r\n\r\n// ✅ Start Order (works already)\r\nexport const startOrder = async () => {\r\n  try {\r\n    const response = await axiosInstance.post(\"/start\");\r\n    console.log(\"Order started:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Failed to start order:\", error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Set order type (works already)\r\nexport const setOrderType = (dispatch, orderType) => {\r\n  dispatch({\r\n    type: ORDER_SET_TYPE,\r\n    payload: orderType,\r\n  });\r\n};\r\n\r\n// ✅ Category images (based on your real folder names)\r\nconst categoryImageMap = {\r\n  ALMUSAL: \"/images/ALMUSAL/Tapsilog.PNG\",\r\n  FAMILYMEAL: \"/images/FAMILYMEAL/Fiesta meal.PNG\",\r\n  MERYENDA: \"/images/MERYENDA/Pancit palabok.png\",\r\n  PANGHIMAGAS: \"/images/PANGHIMAGAS/Leche flan.png\",\r\n  RICEMEAL: \"/images/RICEMEAL/Bistek.png\",\r\n  WHATSNEW: \"/images/WHATSNEW/Sisig.png\",\r\n};\r\n\r\n// ✅ Get categories\r\nexport const listCategories = async (dispatch) => {\r\n  dispatch({ type: CATEGORY_LIST_REQUEST });\r\n  try {\r\n    const { data } = await axiosInstance.get(\"/categories\");\r\n    const mapped = data.map((category) => ({\r\n      name: category,\r\n      image: categoryImageMap[category.toUpperCase()] || \"/images/default.png\",\r\n    }));\r\n    dispatch({ type: CATEGORY_LIST_SUCCESS, payload: mapped });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CATEGORY_LIST_FAIL,\r\n      payload: error.message || \"Failed to fetch categories\",\r\n    });\r\n  }\r\n};\r\n\r\n// ✅ Normalize filename (handles spaces, capitalization, encoding)\r\nconst normalizeImagePath = (category, itemName) => {\r\n  // Clean up name, trim and encode spaces and symbols\r\n  const cleanedName = itemName\r\n    .replaceAll(\"&\", \"and\")\r\n    .replaceAll(\"  \", \" \")\r\n    .trim();\r\n\r\n  // Try multiple possible image extensions (case-insensitive)\r\n  const imageCandidates = [\r\n    `/images/${category}/${cleanedName}.png`,\r\n    `/images/${category}/${cleanedName}.PNG`,\r\n    `/images/${category}/${cleanedName}.jpg`,\r\n    `/images/${category}/${cleanedName}.JPG`,\r\n  ];\r\n\r\n  return imageCandidates;\r\n};\r\n\r\n// ✅ Get menu products per category\r\nexport const listProducts = async (dispatch, categoryName = \"WHATSNEW\") => {\r\n  dispatch({ type: PRODUCT_LIST_REQUEST });\r\n  try {\r\n    const { data } = await axiosInstance.get(`/${categoryName}/menu`, {\r\n      params: { sortOrder: \"default\" },\r\n    });\r\n\r\n    const withImages = data.map((product) => {\r\n      const possibleImages = normalizeImagePath(\r\n        categoryName.toUpperCase(),\r\n        product.itemName\r\n      );\r\n      return {\r\n        ...product,\r\n        image: possibleImages[0], // pick first valid format\r\n      };\r\n    });\r\n\r\n    dispatch({ type: PRODUCT_LIST_SUCCESS, payload: withImages });\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error);\r\n    dispatch({\r\n      type: PRODUCT_LIST_FAIL,\r\n      payload: error.message || \"Failed to fetch menu\",\r\n    });\r\n  }\r\n};\r\n\r\n// ✅ Order actions\r\nexport const addToOrder = (dispatch, item) => {\r\n  dispatch({ type: ORDER_ADD_ITEM, payload: item });\r\n};\r\n\r\nexport const removeFromOrder = (dispatch, item) => {\r\n  dispatch({ type: ORDER_REMOVE_ITEM, payload: item });\r\n};\r\n\r\nexport const clearOrder = (dispatch) => {\r\n  dispatch({ type: ORDER_CLEAR });\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,cAAc,EACdC,qBAAqB,EACrBC,kBAAkB,EAClBC,qBAAqB,EACrBC,oBAAoB,EACpBC,oBAAoB,EACpBC,iBAAiB,EACjBC,cAAc,EACdC,iBAAiB,EACjBC,WAAW,QACN,aAAa;;AAEpB;AACA,MAAMC,aAAa,GAAGX,KAAK,CAACY,MAAM,CAAC;EACjCC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,aAAa,CAACK,IAAI,CAAC,QAAQ,CAAC;IACnDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,QAAQ,CAACI,IAAI,CAAC;IAC5C,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACC,OAAO,CAAC;IACtD,MAAMD,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAGA,CAACC,QAAQ,EAAEC,SAAS,KAAK;EACnDD,QAAQ,CAAC;IACPE,IAAI,EAAExB,cAAc;IACpByB,OAAO,EAAEF;EACX,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMG,gBAAgB,GAAG;EACvBC,OAAO,EAAE,8BAA8B;EACvCC,UAAU,EAAE,oCAAoC;EAChDC,QAAQ,EAAE,qCAAqC;EAC/CC,WAAW,EAAE,oCAAoC;EACjDC,QAAQ,EAAE,6BAA6B;EACvCC,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOX,QAAQ,IAAK;EAChDA,QAAQ,CAAC;IAAEE,IAAI,EAAEvB;EAAsB,CAAC,CAAC;EACzC,IAAI;IACF,MAAM;MAAEiB;IAAK,CAAC,GAAG,MAAMR,aAAa,CAACwB,GAAG,CAAC,aAAa,CAAC;IACvD,MAAMC,MAAM,GAAGjB,IAAI,CAACkB,GAAG,CAAEC,QAAQ,KAAM;MACrCC,IAAI,EAAED,QAAQ;MACdE,KAAK,EAAEb,gBAAgB,CAACW,QAAQ,CAACG,WAAW,CAAC,CAAC,CAAC,IAAI;IACrD,CAAC,CAAC,CAAC;IACHlB,QAAQ,CAAC;MAAEE,IAAI,EAAErB,qBAAqB;MAAEsB,OAAO,EAAEU;IAAO,CAAC,CAAC;EAC5D,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACdG,QAAQ,CAAC;MACPE,IAAI,EAAEtB,kBAAkB;MACxBuB,OAAO,EAAEN,KAAK,CAACC,OAAO,IAAI;IAC5B,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,MAAMqB,kBAAkB,GAAGA,CAACJ,QAAQ,EAAEK,QAAQ,KAAK;EACjD;EACA,MAAMC,WAAW,GAAGD,QAAQ,CACzBE,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CACtBA,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CACrBC,IAAI,CAAC,CAAC;;EAET;EACA,MAAMC,eAAe,GAAG,CACtB,WAAWT,QAAQ,IAAIM,WAAW,MAAM,EACxC,WAAWN,QAAQ,IAAIM,WAAW,MAAM,EACxC,WAAWN,QAAQ,IAAIM,WAAW,MAAM,EACxC,WAAWN,QAAQ,IAAIM,WAAW,MAAM,CACzC;EAED,OAAOG,eAAe;AACxB,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOzB,QAAQ,EAAE0B,YAAY,GAAG,UAAU,KAAK;EACzE1B,QAAQ,CAAC;IAAEE,IAAI,EAAEpB;EAAqB,CAAC,CAAC;EACxC,IAAI;IACF,MAAM;MAAEc;IAAK,CAAC,GAAG,MAAMR,aAAa,CAACwB,GAAG,CAAC,IAAIc,YAAY,OAAO,EAAE;MAChEC,MAAM,EAAE;QAAEC,SAAS,EAAE;MAAU;IACjC,CAAC,CAAC;IAEF,MAAMC,UAAU,GAAGjC,IAAI,CAACkB,GAAG,CAAEgB,OAAO,IAAK;MACvC,MAAMC,cAAc,GAAGZ,kBAAkB,CACvCO,YAAY,CAACR,WAAW,CAAC,CAAC,EAC1BY,OAAO,CAACV,QACV,CAAC;MACD,OAAO;QACL,GAAGU,OAAO;QACVb,KAAK,EAAEc,cAAc,CAAC,CAAC,CAAC,CAAE;MAC5B,CAAC;IACH,CAAC,CAAC;IAEF/B,QAAQ,CAAC;MAAEE,IAAI,EAAEnB,oBAAoB;MAAEoB,OAAO,EAAE0B;IAAW,CAAC,CAAC;EAC/D,CAAC,CAAC,OAAOhC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChDG,QAAQ,CAAC;MACPE,IAAI,EAAElB,iBAAiB;MACvBmB,OAAO,EAAEN,KAAK,CAACC,OAAO,IAAI;IAC5B,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMkC,UAAU,GAAGA,CAAChC,QAAQ,EAAEiC,IAAI,KAAK;EAC5CjC,QAAQ,CAAC;IAAEE,IAAI,EAAEjB,cAAc;IAAEkB,OAAO,EAAE8B;EAAK,CAAC,CAAC;AACnD,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAAClC,QAAQ,EAAEiC,IAAI,KAAK;EACjDjC,QAAQ,CAAC;IAAEE,IAAI,EAAEhB,iBAAiB;IAAEiB,OAAO,EAAE8B;EAAK,CAAC,CAAC;AACtD,CAAC;AAED,OAAO,MAAME,UAAU,GAAInC,QAAQ,IAAK;EACtCA,QAAQ,CAAC;IAAEE,IAAI,EAAEf;EAAY,CAAC,CAAC;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}